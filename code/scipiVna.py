import numpy
import pyvisa
from datetime import datetime, timedelta
import timerit

from pyvisa.resources import MessageBasedResource

from scipiCommands import (
    add_s_param_measurement_command_string,
    preset_system_command_string,
    add_to_display_command_string,
    DisplayAddCommands,
    SParam,
    set_start_or_stop_freq_command_string,
    get_corrected_data_array,
)

"""
File contains scipi interaction script for siglient vna 
"""


NI_VISA_DLL_PATH = r"C:\Windows\System32\nivisa64.dll"
VNA_VISA_ADDRESS = "USB0::0xF4EC::0x1700::SNA5XCED5R0097::INSTR"

rm = pyvisa.ResourceManager(NI_VISA_DLL_PATH)

SNA: MessageBasedResource = rm.open_resource(VNA_VISA_ADDRESS)
print(f'Connected to {SNA.query("*IDN?")}')

# preset the SNA
# SNA.write(preset_system_command_string())

for i, param in enumerate(SParam, start=1):
    SNA.write(add_to_display_command_string(DisplayAddCommands.ADD_TRACE))
    SNA.write(
        add_s_param_measurement_command_string(
            sparam=param, channel_number=1, trace_number=i
        )
    )

# Set channel 1 start frequency to 1GHz and stop frequency to 3 GHz
SNA.write(set_start_or_stop_freq_command_string(1, 1e9))
SNA.write(set_start_or_stop_freq_command_string(1, 3e9, stop_flag=True))

# # Set channel 2 start frequency to 2GHz and stop frequency to 4 GHz
# SNA.write(set_start_or_stop_freq_command_string(2,2e9))
# SNA.write(set_start_or_stop_freq_command_string(2, 4e9, stop_flag=True))

# Select active trace
SNA.write(":CALCulate1:PARameter1:SELect")

# # Turn marker 1 ON for each measurement
# SNA.write(':CALCulate1:TRACe1:MARKer1:ACTivate')
# SNA.write(':CALCulate2:TRACe2:MARKer1:ACTivate')


# Set data format to ASCII
SNA.write(":FORMat:DATA ASC")
# Read trace data
for _ in timerit:
    for param in SParam:
        ascii_data = SNA.query_ascii_values(
            get_corrected_data_array(channel_number=1, sparam=param)
        )
        # timed at 65.408ms
        # print(ascii_data)
# ret val for 201pts
# [-1.206555469113, 0.0, -1.139378663372, 0.0, -1.089087577892, 0.0, -1.122898148306, 0.0, -1.236327884305, 0.0, -1.301909214915, 0.0, -1.306719850215, 0.0, -1.232255917987, 0.0, -1.156887138147, 0.0, -1.13506505166, 0.0, -1.190479301854, 0.0, -1.266086671144, 0.0, -1.322788802956, 0.0, -1.319411631522, 0.0, -1.251124136459, 0.0, -1.158207868065, 0.0, -1.174966766955, 0.0, -1.2324096709, 0.0, -1.31375793018, 0.0, -1.389897879591, 0.0, -1.344197978295, 0.0, -1.275607532997, 0.0, -1.267978713051, 0.0, -1.26169454924, 0.0, -1.305049013883, 0.0, -1.376590533484, 0.0, -1.397488783354, 0.0, -1.36497759742, 0.0, -1.323609400532, 0.0, -1.28351452595, 0.0, -1.290008907746, 0.0, -1.338409685305, 0.0, -1.396540977195, 0.0, -1.398573113938, 0.0, -1.394291788863, 0.0, -1.354866386724, 0.0, -1.304769841259, 0.0, -1.340895163768, 0.0, -1.387772327668, 0.0, -1.436551614123, 0.0, -1.489509183259, 0.0, -1.465739289475, 0.0, -1.407098581586, 0.0, -1.3602383974, 0.0, -1.353994980907, 0.0, -1.410743537107, 0.0, -1.474639680176, 0.0, -1.519048214335, 0.0, -1.487701431783, 0.0, -1.413561264584, 0.0, -1.373224746788, 0.0, -1.373993413718, 0.0, -1.444494253649, 0.0, -1.553062697551, 0.0, -1.560782706396, 0.0, -1.523510422691, 0.0, -1.463195839554, 0.0, -1.41933627003, 0.0, -1.444548475639, 0.0, -1.541079518406, 0.0, -1.591010347772, 0.0, -1.594772683832, 0.0, -1.550550256197, 0.0, -1.483471664863, 0.0, -1.442280440414, 0.0, -1.489150541993, 0.0, -1.557041931357, 0.0, -1.588905120898, 0.0, -1.594679716662, 0.0, -1.549407250611, 0.0, -1.484774851784, 0.0, -1.502006035822, 0.0, -1.543331988524, 0.0, -1.609252337329, 0.0, -1.678717115141, 0.0, -1.632703062544, 0.0, -1.575491404556, 0.0, -1.564751128357, 0.0, -1.565633271781, 0.0, -1.599194778163, 0.0, -1.654816161217, 0.0, -1.654365025555, 0.0, -1.626344646606, 0.0, -1.591522108772, 0.0, -1.568377428264, 0.0, -1.563562497301, 0.0, -1.605944475523, 0.0, -1.664984024124, 0.0, -1.703930641246, 0.0, -1.672959677395, 0.0, -1.642293361714, 0.0, -1.618595937557, 0.0, -1.640299166225, 0.0, -1.67302589674, 0.0, -1.706804146785, 0.0, -1.736428622248, 0.0, -1.722592994651, 0.0, -1.678335750744, 0.0, -1.644979608307, 0.0, -1.655566238816, 0.0, -1.690256398358, 0.0, -1.71768230086, 0.0, -1.744569827048, 0.0, -1.718463309653, 0.0, -1.677547973628, 0.0, -1.702686998482, 0.0, -1.710231631934, 0.0, -1.727399180421, 0.0, -1.796554991014, 0.0, -1.818127105146, 0.0, -1.791207253142, 0.0, -1.75347290902, 0.0, -1.728505272227, 0.0, -1.726505075546, 0.0, -1.766984060973, 0.0, -1.773040512343, 0.0, -1.745099239721, 0.0, -1.77449450596, 0.0, -1.778522807277, 0.0, -1.75797307273, 0.0, -1.789695376382, 0.0, -1.815283902698, 0.0, -1.84499906267, 0.0, -1.820830294886, 0.0, -1.78117675903, 0.0, -1.773783927824, 0.0, -1.84095269033, 0.0, -1.862821721334, 0.0, -1.880361852414, 0.0, -1.871313021452, 0.0, -1.832151811353, 0.0, -1.806189234212, 0.0, -1.789640258018, 0.0, -1.831922007015, 0.0, -1.897205711704, 0.0, -1.922754741673, 0.0, -1.922476972744, 0.0, -1.850037856805, 0.0, -1.811355867713, 0.0, -1.847675965886, 0.0, -1.913827750866, 0.0, -1.968842422317, 0.0, -2.001524516069, 0.0, -2.000341049295, 0.0, -1.927901115296, 0.0, -1.890230073377, 0.0, -1.911839070106, 0.0, -1.976690368621, 0.0, -2.064515490705, 0.0, -2.056977957761, 0.0, -1.967765224047, 0.0, -1.918350540757, 0.0, -1.893157535741, 0.0, -1.929509465996, 0.0, -2.036452567014, 0.0, -2.110791997517, 0.0, -2.082724478753, 0.0, -2.030980513965, 0.0, -1.933464344579, 0.0, -1.920719949508, 0.0, -2.072619726408, 0.0, -2.15441887474, 0.0, -2.177911124943, 0.0, -2.129994655382, 0.0, -2.03201417361, 0.0, -1.934137308489, 0.0, -1.952384546506, 0.0, -2.035516186688, 0.0, -2.137241472053, 0.0, -2.172111901499, 0.0, -2.109398701262, 0.0, -1.991543803217, 0.0, -1.96991961141, 0.0, -2.002139814903, 0.0, -2.097751186299, 0.0, -2.18883562392, 0.0, -2.185230976003, 0.0, -2.138979084979, 0.0, -2.065551625712, 0.0, -2.001380661958, 0.0, -2.050998276553, 0.0, -2.145751580456, 0.0, -2.181256500651, 0.0, -2.159274493796, 0.0, -2.088414425242, 0.0, -2.014636778901, 0.0, -2.006470912971, 0.0, -2.050439220234, 0.0, -2.117961816868, 0.0, -2.174677528586, 0.0, -2.130707353491, 0.0, -2.105568791837, 0.0, -2.063521750061, 0.0, -2.073359774322, 0.0, -2.154653958552, 0.0, -2.212175170318, 0.0, -2.183882479036, 0.0, -2.161152810607, 0.0, -2.140447107141, 0.0, -2.111191132949, 0.0, -2.09999206966, 0.0]

# print(binary_data)

# frequency_sweep_points = SNA.query_ascii_values(':SENSe1:FREQuency:DATA?')
# print(frequency_sweep_points)
# ret val for 201pts
# [1000000000.0, 1010000000.0, 1020000000.0, 1030000000.0, 1040000000.0, 1050000000.0, 1060000000.0, 1070000000.0, 1080000000.0, 1090000000.0, 1100000000.0, 1110000000.0, 1120000000.0, 1130000000.0, 1140000000.0, 1150000000.0, 1160000000.0, 1170000000.0, 1180000000.0, 1190000000.0, 1200000000.0, 1210000000.0, 1220000000.0, 1230000000.0, 1240000000.0, 1250000000.0, 1260000000.0, 1270000000.0, 1280000000.0, 1290000000.0, 1300000000.0, 1310000000.0, 1320000000.0, 1330000000.0, 1340000000.0, 1350000000.0, 1360000000.0, 1370000000.0, 1380000000.0, 1390000000.0, 1400000000.0, 1410000000.0, 1420000000.0, 1430000000.0, 1440000000.0, 1450000000.0, 1460000000.0, 1470000000.0, 1480000000.0, 1490000000.0, 1500000000.0, 1510000000.0, 1520000000.0, 1530000000.0, 1540000000.0, 1550000000.0, 1560000000.0, 1570000000.0, 1580000000.0, 1590000000.0, 1600000000.0, 1610000000.0, 1620000000.0, 1630000000.0, 1640000000.0, 1650000000.0, 1660000000.0, 1670000000.0, 1680000000.0, 1690000000.0, 1700000000.0, 1710000000.0, 1720000000.0, 1730000000.0, 1740000000.0, 1750000000.0, 1760000000.0, 1770000000.0, 1780000000.0, 1790000000.0, 1800000000.0, 1810000000.0, 1820000000.0, 1830000000.0, 1840000000.0, 1850000000.0, 1860000000.0, 1870000000.0, 1880000000.0, 1890000000.0, 1900000000.0, 1910000000.0, 1920000000.0, 1930000000.0, 1940000000.0, 1950000000.0, 1960000000.0, 1970000000.0, 1980000000.0, 1990000000.0, 2000000000.0, 2010000000.0, 2020000000.0, 2030000000.0, 2040000000.0, 2050000000.0, 2060000000.0, 2070000000.0, 2080000000.0, 2090000000.0, 2100000000.0, 2110000000.0, 2120000000.0, 2130000000.0, 2140000000.0, 2150000000.0, 2160000000.0, 2170000000.0, 2180000000.0, 2190000000.0, 2200000000.0, 2210000000.0, 2220000000.0, 2230000000.0, 2240000000.0, 2250000000.0, 2260000000.0, 2270000000.0, 2280000000.0, 2290000000.0, 2300000000.0, 2310000000.0, 2320000000.0, 2330000000.0, 2340000000.0, 2350000000.0, 2360000000.0, 2370000000.0, 2380000000.0, 2390000000.0, 2400000000.0, 2410000000.0, 2420000000.0, 2430000000.0, 2440000000.0, 2450000000.0, 2460000000.0, 2470000000.0, 2480000000.0, 2490000000.0, 2500000000.0, 2510000000.0, 2520000000.0, 2530000000.0, 2540000000.0, 2550000000.0, 2560000000.0, 2570000000.0, 2580000000.0, 2590000000.0, 2600000000.0, 2610000000.0, 2620000000.0, 2630000000.0, 2640000000.0, 2650000000.0, 2660000000.0, 2670000000.0, 2680000000.0, 2690000000.0, 2700000000.0, 2710000000.0, 2720000000.0, 2730000000.0, 2740000000.0, 2750000000.0, 2760000000.0, 2770000000.0, 2780000000.0, 2790000000.0, 2800000000.0, 2810000000.0, 2820000000.0, 2830000000.0, 2840000000.0, 2850000000.0, 2860000000.0, 2870000000.0, 2880000000.0, 2890000000.0, 2900000000.0, 2910000000.0, 2920000000.0, 2930000000.0, 2940000000.0, 2950000000.0, 2960000000.0, 2970000000.0, 2980000000.0, 2990000000.0, 3000000000.0]

SNA.write(":MMEMory:STORe:SNP:TYPE:S4P 1,2,3,4")

run_time = timedelta(minutes=1)
start_time = datetime.now()
finish_time = start_time + run_time
current_time = datetime.now()
time_string = current_time.strftime("%d_%m_%Y_%H_%M")
print(time_string)
path = f"local/James/test_{time_string}"
SNA.write(f':MMEMory:MDIRectory "{path}"')
i = 0
while current_time < finish_time:
    SNA.write(f':MMEMory:STORe:SNP "{path}/test{i}.s4p"')
    while True:
        if int(SNA.query("*OPC?")) == 1:
            break
    current_time = datetime.now()
    i = i + 1

# Preset the SNA again
# SNA.write(':SYSTem:PRESet')
#
# # Set data format to ASCII
# SNA.write(':FORMat:DATA ASC')
